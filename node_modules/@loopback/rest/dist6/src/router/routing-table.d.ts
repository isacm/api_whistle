/// <reference types="node" />
import { OperationObject, PathsObject } from '@loopback/openapi-spec';
import { Context, Constructor } from '@loopback/context';
import { ServerRequest } from 'http';
import { ParsedRequest, PathParameterValues, OperationArgs, OperationRetval } from '../internal-types';
import { ControllerSpec } from './metadata';
/**
 * Parse the URL of the incoming request and set additional properties
 * on this request object:
 *  - `path`
 *  - `query`
 *
 * @private
 * @param request
 */
export declare function parseRequestUrl(request: ServerRequest): ParsedRequest;
export declare type ControllerClass = Constructor<any>;
export declare class RoutingTable {
    private readonly _routes;
    registerController(controller: ControllerClass, spec: ControllerSpec): void;
    static joinPath(basePath: string, path: string): string;
    registerRoute(route: RouteEntry): void;
    describeApiPaths(): PathsObject;
    find(request: ParsedRequest): ResolvedRoute;
}
export interface RouteEntry {
    readonly verb: string;
    readonly path: string;
    readonly spec: OperationObject;
    match(request: ParsedRequest): ResolvedRoute | undefined;
    updateBindings(requestContext: Context): void;
    invokeHandler(requestContext: Context, args: OperationArgs): Promise<OperationRetval>;
    describe(): string;
}
export interface ResolvedRoute extends RouteEntry {
    readonly pathParams: PathParameterValues;
}
export declare abstract class BaseRoute implements RouteEntry {
    readonly path: string;
    readonly spec: OperationObject;
    readonly verb: string;
    private readonly _keys;
    private readonly _pathRegexp;
    constructor(verb: string, path: string, spec: OperationObject);
    match(request: ParsedRequest): ResolvedRoute | undefined;
    abstract updateBindings(requestContext: Context): void;
    abstract invokeHandler(requestContext: Context, args: OperationArgs): Promise<OperationRetval>;
    describe(): string;
    private _buildPathParams(pathMatch);
}
export declare function createResolvedRoute(route: RouteEntry, pathParams: PathParameterValues): ResolvedRoute;
export declare class Route extends BaseRoute {
    readonly spec: OperationObject;
    protected readonly _handler: Function;
    constructor(verb: string, path: string, spec: OperationObject, _handler: Function);
    describe(): string;
    updateBindings(requestContext: Context): void;
    invokeHandler(requestContext: Context, args: OperationArgs): Promise<OperationRetval>;
}
export declare class ControllerRoute extends BaseRoute {
    protected readonly _controllerCtor: ControllerClass;
    protected readonly _methodName: string;
    constructor(verb: string, path: string, spec: OperationObject, _controllerCtor: ControllerClass, methodName?: string);
    describe(): string;
    updateBindings(requestContext: Context): void;
    invokeHandler(requestContext: Context, args: OperationArgs): Promise<OperationRetval>;
    private _createControllerInstance(requestContext);
}
