import { OperationObject, ParameterObject, SchemaObject, PathsObject } from '@loopback/openapi-spec';
export interface ControllerSpec {
    /**
     * The base path on which the Controller API is served.
     * If it is not included, the API is served directly under the host.
     * The value MUST start with a leading slash (/).
     */
    basePath?: string;
    /**
     * The available paths and operations for the API.
     */
    paths: PathsObject;
}
/**
 * Decorate the given Controller constructor with metadata describing
 * the HTTP/REST API the Controller implements/provides.
 *
 * `@api` can be applied to controller classes. For example,
 * ```
 * @api({basePath: '/my'})
 * class MyController {
 *   // ...
 * }
 * ```
 *
 * @param spec OpenAPI specification describing the endpoints
 * handled by this controller
 *
 * @decorator
 */
export declare function api(spec: ControllerSpec): (constructor: Function) => void;
/**
 * Get the controller spec for the given class
 * @param constructor Controller class
 */
export declare function getControllerSpec(constructor: Function): ControllerSpec;
/**
 * Expose a Controller method as a REST API operation
 * mapped to `GET` request method.
 *
 * @param path The URL path of this operation, e.g. `/product/{id}`
 * @param spec The OpenAPI specification describing parameters and responses
 *   of this operation.
 */
export declare function get(path: string, spec?: OperationObject): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * Expose a Controller method as a REST API operation
 * mapped to `POST` request method.
 *
 * @param path The URL path of this operation, e.g. `/product/{id}`
 * @param spec The OpenAPI specification describing parameters and responses
 *   of this operation.
 */
export declare function post(path: string, spec?: OperationObject): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * Expose a Controller method as a REST API operation
 * mapped to `PUT` request method.
 *
 * @param path The URL path of this operation, e.g. `/product/{id}`
 * @param spec The OpenAPI specification describing parameters and responses
 *   of this operation.
 */
export declare function put(path: string, spec?: OperationObject): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * Expose a Controller method as a REST API operation
 * mapped to `PATCH` request method.
 *
 * @param path The URL path of this operation, e.g. `/product/{id}`
 * @param spec The OpenAPI specification describing parameters and responses
 *   of this operation.
 */
export declare function patch(path: string, spec?: OperationObject): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * Expose a Controller method as a REST API operation
 * mapped to `DELETE` request method.
 *
 * @param path The URL path of this operation, e.g. `/product/{id}`
 * @param spec The OpenAPI specification describing parameters and responses
 *   of this operation.
 */
export declare function del(path: string, spec?: OperationObject): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * Expose a Controller method as a REST API operation.
 *
 * @param verb HTTP verb, e.g. `GET` or `POST`.
 * @param path The URL path of this operation, e.g. `/product/{id}`
 * @param spec The OpenAPI specification describing parameters and responses
 *   of this operation.
 */
export declare function operation(verb: string, path: string, spec?: OperationObject): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * Describe an input parameter of a Controller method.
 *
 * `@param` can be applied to method itself or specific parameters. For example,
 * ```
 * class MyController {
 *   @get('/')
 *   @param(offsetSpec)
 *   @param(pageSizeSpec)
 *   list(offset?: number, pageSize?: number) {}
 * }
 * ```
 * or
 * ```
 * class MyController {
 *   @get('/')
 *   list(
 *     @param(offsetSpec) offset?: number,
 *     @param(pageSizeSpec) pageSize?: number,
 *   ) {}
 * }
 * ```
 * Please note mixed usage of `@param` at method/parameter level is not allowed.
 *
 * @param paramSpec Parameter specification.
 */
export declare function param(paramSpec: ParameterObject): (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
export declare namespace param {
    const query: {
        string: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        number: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        integer: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        boolean: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
    };
    const header: {
        string: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        number: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        integer: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        boolean: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
    };
    const path: {
        string: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        number: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        integer: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        boolean: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
    };
    const formData: {
        string: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        number: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        integer: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
        boolean: (name: string) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
    };
    /**
     * Define a parameter that's set to the full request body.
     *
     * @param name Parameter name
     * @param schema The schema defining the type used for the body parameter.
     */
    const body: (name: string, schema: SchemaObject) => (target: any, propertyKey: string, descriptorOrParameterIndex: number | PropertyDescriptor) => void;
}
